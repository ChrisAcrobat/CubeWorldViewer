name: Deploy

on:
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  Deploy:
    environment:
      name: Build & Deploy
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('node:fs/promises')
            const root = 'build/'

            function mapOptions(directory, origin){
              return fs.readdir(directory).then(directoryContents => {
              const promises = []
              directoryContents.forEach(directoryContent => {
                promises.push(fs.lstat(directory+directoryContent).then(stat => {
                if(stat.isDirectory()){
                  return mapOptions(directory+directoryContent+'/', origin)
                }else{
                  return directory.replace(root, '')+directoryContent
                }
                }))
              })
              return promises
              })
            }

            function awaitArray(promises){
              if(Array.isArray(promises)){
                promises = promises.flat()
              }
              if(promises[0].then){
                return Promise.all(promises).then(awaitArray)
              }else{
                return promises
              }
            }

            fs.mkdir(root).then(() => {
              fs.rename('CubeWorlds', root+'CubeWorlds').then(() => {
                fs.readFile('index.html', 'utf-8').then(data => {
                  mapOptions(root+'CubeWorlds/', root+'CubeWorlds/').then(awaitArray).then(options => {
                    let jsonString = ''
                    let previousSetting = ''
                    options.forEach((option, index) => {
                      let setting = option.split('/')
                      const map = setting.pop()
                      setting = setting.join('/')
                      if(previousSetting !== setting){
                        if(previousSetting){
                          jsonString += `\n\t\t\t\t\t}\n\t\t\t\t},{\n\t\t\t\t\t'${setting}': {`
                        }else{
                          jsonString += `'${setting}': {`
                        }
                        previousSetting = setting
                      }
                      let type = +map[0]
                      switch(type){
                        case 0:
                          type = 'WorldMap'
                          break
                        case 1:
                          type = 'BodyMap'
                          break
                        case 2:
                          type = 'HeightMap'
                          break
                      }
                      jsonString += `\n\t\t\t\t\t\t'${type}': '${map}'`
                      if(index%3 < 2){
                        jsonString += `,`
                      }
                    })
                    jsonString += `\n\t\t\t\t\t}`
                    data = data.replace(new RegExp(/\/\*TEST_MAPS\*\/[\s\S]*\/\*\/TEST_MAPS\*\//g), jsonString)
                    fs.writeFile(root+'index.html', data, 'utf-8')
                  })
                })
              })
            })
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'build'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

