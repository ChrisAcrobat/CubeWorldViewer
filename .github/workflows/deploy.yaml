name: Deploy

on:
  push:
    branches: [ "main", "initial" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  Deploy:
    environment:
      name: Build & Deploy
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('node:fs/promises')
            const root = 'build/'

            function mapOptions(directory){
              return fs.readdir(directory).then(directoryContents => {
                const promises = []
                directoryContents.forEach(directoryContent => {
                  promises.push(fs.lstat(directory+directoryContent).then(stat => {
                    if(stat.isDirectory()){
                      return mapOptions(directory+directoryContent+'/')
                    }else{
                      const mapUrl = directory.replace(root, '')+directoryContent
                      let mapName = directoryContent.substr(2)                                           // Remove 'n_'
                      mapName = mapName.substring(0, mapName.length-4)                                   // Remove '.PNG'
                      mapName = mapName+' (Size: '+directory.substring(directory.lastIndexOf('/')+1)+')' // Add size
                      return '\n\t\t\t\t\t<option value="'+mapUrl+'">'+mapName+'</option>'
                    }
                  }))
                })
                return promises
              })
            }

            function awaitArray(promises){
              if(Array.isArray(promises)){
                promises = promises.flat()
              }
              if(promises[0].then){
                return Promise.all(promises).then(awaitArray)
              }else{
                return promises.join('')
              }
            }

            fs.mkdir(root).then(() => {
              fs.rename('CubeWorlds', root+'CubeWorlds').then(() => {
                fs.readFile('index.html', 'utf-8').then(data => {
                  mapOptions(root+'CubeWorlds/').then(awaitArray).then(options => {
                    data = data.replace(new RegExp(/\n.*<!--TEST_MAPS-->[\s\S]*<!--\/TEST_MAPS-->/g), options)
                    fs.writeFile(root+'index.html', data, 'utf-8')
                  })
                })
              })
            })
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'build'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

